{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\praga\\\\OneDrive\\\\Desktop\\\\healthcare-frontend\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const storedUser = localStorage.getItem('healthcareUser');\n    const token = localStorage.getItem('healthcareToken');\n    if (storedUser && token) {\n      try {\n        setUser(JSON.parse(storedUser));\n      } catch (error) {\n        console.error('Error parsing stored user:', error);\n        localStorage.removeItem('healthcareUser');\n        localStorage.removeItem('healthcareToken');\n      }\n    }\n    setLoading(false);\n  }, []);\n  const login = (userData, token) => {\n    setUser(userData);\n    localStorage.setItem('healthcareUser', JSON.stringify(userData));\n    localStorage.setItem('healthcareToken', token);\n  };\n  const logout = () => {\n    setUser(null);\n    localStorage.removeItem('healthcareUser');\n    localStorage.removeItem('healthcareToken');\n  };\n  const value = {\n    user,\n    login,\n    logout,\n    loading,\n    isAuthenticated: !!user\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 10\n  }, this);\n};\n_s2(AuthProvider, \"NiO5z6JIqzX62LS5UWDgIqbZYyY=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","loading","setLoading","storedUser","localStorage","getItem","token","JSON","parse","error","console","removeItem","login","userData","setItem","stringify","logout","value","isAuthenticated","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/praga/OneDrive/Desktop/healthcare-frontend/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const storedUser = localStorage.getItem('healthcareUser');\r\n    const token = localStorage.getItem('healthcareToken');\r\n    \r\n    if (storedUser && token) {\r\n      try {\r\n        setUser(JSON.parse(storedUser));\r\n      } catch (error) {\r\n        console.error('Error parsing stored user:', error);\r\n        localStorage.removeItem('healthcareUser');\r\n        localStorage.removeItem('healthcareToken');\r\n      }\r\n    }\r\n    setLoading(false);\r\n  }, []);\r\n\r\n  const login = (userData, token) => {\r\n    setUser(userData);\r\n    localStorage.setItem('healthcareUser', JSON.stringify(userData));\r\n    localStorage.setItem('healthcareToken', token);\r\n  };\r\n\r\n  const logout = () => {\r\n    setUser(null);\r\n    localStorage.removeItem('healthcareUser');\r\n    localStorage.removeItem('healthcareToken');\r\n  };\r\n\r\n  const value = {\r\n    user,\r\n    login,\r\n    logout,\r\n    loading,\r\n    isAuthenticated: !!user,\r\n  };\r\n\r\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\r\n};\r\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,UAAU,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9E,MAAMC,WAAW,gBAAGN,aAAa,CAAC,CAAC;AAEnC,OAAO,MAAMO,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAMC,OAAO,GAAGP,UAAU,CAACI,WAAW,CAAC;EACvC,IAAI,CAACG,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,6CAA6C,CAAC;EAChE;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,EAAA,CANWD,OAAO;AAQpB,OAAO,MAAMI,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EAC5C,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACe,OAAO,EAAEC,UAAU,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC;EAE5CE,SAAS,CAAC,MAAM;IACd,MAAMe,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,gBAAgB,CAAC;IACzD,MAAMC,KAAK,GAAGF,YAAY,CAACC,OAAO,CAAC,iBAAiB,CAAC;IAErD,IAAIF,UAAU,IAAIG,KAAK,EAAE;MACvB,IAAI;QACFN,OAAO,CAACO,IAAI,CAACC,KAAK,CAACL,UAAU,CAAC,CAAC;MACjC,CAAC,CAAC,OAAOM,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;QAClDL,YAAY,CAACO,UAAU,CAAC,gBAAgB,CAAC;QACzCP,YAAY,CAACO,UAAU,CAAC,iBAAiB,CAAC;MAC5C;IACF;IACAT,UAAU,CAAC,KAAK,CAAC;EACnB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMU,KAAK,GAAGA,CAACC,QAAQ,EAAEP,KAAK,KAAK;IACjCN,OAAO,CAACa,QAAQ,CAAC;IACjBT,YAAY,CAACU,OAAO,CAAC,gBAAgB,EAAEP,IAAI,CAACQ,SAAS,CAACF,QAAQ,CAAC,CAAC;IAChET,YAAY,CAACU,OAAO,CAAC,iBAAiB,EAAER,KAAK,CAAC;EAChD,CAAC;EAED,MAAMU,MAAM,GAAGA,CAAA,KAAM;IACnBhB,OAAO,CAAC,IAAI,CAAC;IACbI,YAAY,CAACO,UAAU,CAAC,gBAAgB,CAAC;IACzCP,YAAY,CAACO,UAAU,CAAC,iBAAiB,CAAC;EAC5C,CAAC;EAED,MAAMM,KAAK,GAAG;IACZlB,IAAI;IACJa,KAAK;IACLI,MAAM;IACNf,OAAO;IACPiB,eAAe,EAAE,CAAC,CAACnB;EACrB,CAAC;EAED,oBAAOT,OAAA,CAACC,WAAW,CAAC4B,QAAQ;IAACF,KAAK,EAAEA,KAAM;IAAApB,QAAA,EAAEA;EAAQ;IAAAuB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAuB,CAAC;AAC9E,CAAC;AAACzB,GAAA,CAzCWF,YAAY;AAAA4B,EAAA,GAAZ5B,YAAY;AAAA,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}